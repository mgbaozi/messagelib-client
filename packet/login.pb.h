// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: login.proto

#ifndef PROTOBUF_login_2eproto__INCLUDED
#define PROTOBUF_login_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace login {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_login_2eproto();
void protobuf_AssignDesc_login_2eproto();
void protobuf_ShutdownFile_login_2eproto();

class Register;
class Response;
class Login;
class Result;

enum Response_Error {
  Response_Error_SUCCESS = 0,
  Response_Error_UNKNOWN_DEVICE = 1
};
bool Response_Error_IsValid(int value);
const Response_Error Response_Error_Error_MIN = Response_Error_SUCCESS;
const Response_Error Response_Error_Error_MAX = Response_Error_UNKNOWN_DEVICE;
const int Response_Error_Error_ARRAYSIZE = Response_Error_Error_MAX + 1;

const ::google::protobuf::EnumDescriptor* Response_Error_descriptor();
inline const ::std::string& Response_Error_Name(Response_Error value) {
  return ::google::protobuf::internal::NameOfEnum(
    Response_Error_descriptor(), value);
}
inline bool Response_Error_Parse(
    const ::std::string& name, Response_Error* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Response_Error>(
    Response_Error_descriptor(), name, value);
}
enum Result_Error {
  Result_Error_SUCCESS = 0,
  Result_Error_TOKEN_NOT_AVAILABLE = 1
};
bool Result_Error_IsValid(int value);
const Result_Error Result_Error_Error_MIN = Result_Error_SUCCESS;
const Result_Error Result_Error_Error_MAX = Result_Error_TOKEN_NOT_AVAILABLE;
const int Result_Error_Error_ARRAYSIZE = Result_Error_Error_MAX + 1;

const ::google::protobuf::EnumDescriptor* Result_Error_descriptor();
inline const ::std::string& Result_Error_Name(Result_Error value) {
  return ::google::protobuf::internal::NameOfEnum(
    Result_Error_descriptor(), value);
}
inline bool Result_Error_Parse(
    const ::std::string& name, Result_Error* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Result_Error>(
    Result_Error_descriptor(), name, value);
}
// ===================================================================

class Register : public ::google::protobuf::Message {
 public:
  Register();
  virtual ~Register();
  
  Register(const Register& from);
  
  inline Register& operator=(const Register& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Register& default_instance();
  
  void Swap(Register* other);
  
  // implements Message ----------------------------------------------
  
  Register* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Register& from);
  void MergeFrom(const Register& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string device_type = 1;
  inline bool has_device_type() const;
  inline void clear_device_type();
  static const int kDeviceTypeFieldNumber = 1;
  inline const ::std::string& device_type() const;
  inline void set_device_type(const ::std::string& value);
  inline void set_device_type(const char* value);
  inline void set_device_type(const char* value, size_t size);
  inline ::std::string* mutable_device_type();
  inline ::std::string* release_device_type();
  
  // required string device_token = 2;
  inline bool has_device_token() const;
  inline void clear_device_token();
  static const int kDeviceTokenFieldNumber = 2;
  inline const ::std::string& device_token() const;
  inline void set_device_token(const ::std::string& value);
  inline void set_device_token(const char* value);
  inline void set_device_token(const char* value, size_t size);
  inline ::std::string* mutable_device_token();
  inline ::std::string* release_device_token();
  
  // required string device_uuid = 3;
  inline bool has_device_uuid() const;
  inline void clear_device_uuid();
  static const int kDeviceUuidFieldNumber = 3;
  inline const ::std::string& device_uuid() const;
  inline void set_device_uuid(const ::std::string& value);
  inline void set_device_uuid(const char* value);
  inline void set_device_uuid(const char* value, size_t size);
  inline ::std::string* mutable_device_uuid();
  inline ::std::string* release_device_uuid();
  
  // required string system_version = 4;
  inline bool has_system_version() const;
  inline void clear_system_version();
  static const int kSystemVersionFieldNumber = 4;
  inline const ::std::string& system_version() const;
  inline void set_system_version(const ::std::string& value);
  inline void set_system_version(const char* value);
  inline void set_system_version(const char* value, size_t size);
  inline ::std::string* mutable_system_version();
  inline ::std::string* release_system_version();
  
  // required string software_version = 5;
  inline bool has_software_version() const;
  inline void clear_software_version();
  static const int kSoftwareVersionFieldNumber = 5;
  inline const ::std::string& software_version() const;
  inline void set_software_version(const ::std::string& value);
  inline void set_software_version(const char* value);
  inline void set_software_version(const char* value, size_t size);
  inline ::std::string* mutable_software_version();
  inline ::std::string* release_software_version();
  
  // required string secret_key = 6;
  inline bool has_secret_key() const;
  inline void clear_secret_key();
  static const int kSecretKeyFieldNumber = 6;
  inline const ::std::string& secret_key() const;
  inline void set_secret_key(const ::std::string& value);
  inline void set_secret_key(const char* value);
  inline void set_secret_key(const char* value, size_t size);
  inline ::std::string* mutable_secret_key();
  inline ::std::string* release_secret_key();
  
  // @@protoc_insertion_point(class_scope:login.Register)
 private:
  inline void set_has_device_type();
  inline void clear_has_device_type();
  inline void set_has_device_token();
  inline void clear_has_device_token();
  inline void set_has_device_uuid();
  inline void clear_has_device_uuid();
  inline void set_has_system_version();
  inline void clear_has_system_version();
  inline void set_has_software_version();
  inline void clear_has_software_version();
  inline void set_has_secret_key();
  inline void clear_has_secret_key();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* device_type_;
  ::std::string* device_token_;
  ::std::string* device_uuid_;
  ::std::string* system_version_;
  ::std::string* software_version_;
  ::std::string* secret_key_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();
  
  void InitAsDefaultInstance();
  static Register* default_instance_;
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message {
 public:
  Response();
  virtual ~Response();
  
  Response(const Response& from);
  
  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();
  
  void Swap(Response* other);
  
  // implements Message ----------------------------------------------
  
  Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Response_Error Error;
  static const Error SUCCESS = Response_Error_SUCCESS;
  static const Error UNKNOWN_DEVICE = Response_Error_UNKNOWN_DEVICE;
  static inline bool Error_IsValid(int value) {
    return Response_Error_IsValid(value);
  }
  static const Error Error_MIN =
    Response_Error_Error_MIN;
  static const Error Error_MAX =
    Response_Error_Error_MAX;
  static const int Error_ARRAYSIZE =
    Response_Error_Error_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Error_descriptor() {
    return Response_Error_descriptor();
  }
  static inline const ::std::string& Error_Name(Error value) {
    return Response_Error_Name(value);
  }
  static inline bool Error_Parse(const ::std::string& name,
      Error* value) {
    return Response_Error_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .login.Response.Error err = 1;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  inline ::login::Response_Error err() const;
  inline void set_err(::login::Response_Error value);
  
  // required string user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline const ::std::string& user_id() const;
  inline void set_user_id(const ::std::string& value);
  inline void set_user_id(const char* value);
  inline void set_user_id(const char* value, size_t size);
  inline ::std::string* mutable_user_id();
  inline ::std::string* release_user_id();
  
  // required string user_token = 3;
  inline bool has_user_token() const;
  inline void clear_user_token();
  static const int kUserTokenFieldNumber = 3;
  inline const ::std::string& user_token() const;
  inline void set_user_token(const ::std::string& value);
  inline void set_user_token(const char* value);
  inline void set_user_token(const char* value, size_t size);
  inline ::std::string* mutable_user_token();
  inline ::std::string* release_user_token();
  
  // @@protoc_insertion_point(class_scope:login.Response)
 private:
  inline void set_has_err();
  inline void clear_has_err();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_user_token();
  inline void clear_has_user_token();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* user_id_;
  ::std::string* user_token_;
  int err_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();
  
  void InitAsDefaultInstance();
  static Response* default_instance_;
};
// -------------------------------------------------------------------

class Login : public ::google::protobuf::Message {
 public:
  Login();
  virtual ~Login();
  
  Login(const Login& from);
  
  inline Login& operator=(const Login& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Login& default_instance();
  
  void Swap(Login* other);
  
  // implements Message ----------------------------------------------
  
  Login* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Login& from);
  void MergeFrom(const Login& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline const ::std::string& user_id() const;
  inline void set_user_id(const ::std::string& value);
  inline void set_user_id(const char* value);
  inline void set_user_id(const char* value, size_t size);
  inline ::std::string* mutable_user_id();
  inline ::std::string* release_user_id();
  
  // required string user_token = 2;
  inline bool has_user_token() const;
  inline void clear_user_token();
  static const int kUserTokenFieldNumber = 2;
  inline const ::std::string& user_token() const;
  inline void set_user_token(const ::std::string& value);
  inline void set_user_token(const char* value);
  inline void set_user_token(const char* value, size_t size);
  inline ::std::string* mutable_user_token();
  inline ::std::string* release_user_token();
  
  // @@protoc_insertion_point(class_scope:login.Login)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_user_token();
  inline void clear_has_user_token();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* user_id_;
  ::std::string* user_token_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();
  
  void InitAsDefaultInstance();
  static Login* default_instance_;
};
// -------------------------------------------------------------------

class Result : public ::google::protobuf::Message {
 public:
  Result();
  virtual ~Result();
  
  Result(const Result& from);
  
  inline Result& operator=(const Result& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Result& default_instance();
  
  void Swap(Result* other);
  
  // implements Message ----------------------------------------------
  
  Result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Result& from);
  void MergeFrom(const Result& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Result_Error Error;
  static const Error SUCCESS = Result_Error_SUCCESS;
  static const Error TOKEN_NOT_AVAILABLE = Result_Error_TOKEN_NOT_AVAILABLE;
  static inline bool Error_IsValid(int value) {
    return Result_Error_IsValid(value);
  }
  static const Error Error_MIN =
    Result_Error_Error_MIN;
  static const Error Error_MAX =
    Result_Error_Error_MAX;
  static const int Error_ARRAYSIZE =
    Result_Error_Error_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Error_descriptor() {
    return Result_Error_descriptor();
  }
  static inline const ::std::string& Error_Name(Error value) {
    return Result_Error_Name(value);
  }
  static inline bool Error_Parse(const ::std::string& name,
      Error* value) {
    return Result_Error_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .login.Result.Error err = 1;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  inline ::login::Result_Error err() const;
  inline void set_err(::login::Result_Error value);
  
  // required string login_token = 2;
  inline bool has_login_token() const;
  inline void clear_login_token();
  static const int kLoginTokenFieldNumber = 2;
  inline const ::std::string& login_token() const;
  inline void set_login_token(const ::std::string& value);
  inline void set_login_token(const char* value);
  inline void set_login_token(const char* value, size_t size);
  inline ::std::string* mutable_login_token();
  inline ::std::string* release_login_token();
  
  // @@protoc_insertion_point(class_scope:login.Result)
 private:
  inline void set_has_err();
  inline void clear_has_err();
  inline void set_has_login_token();
  inline void clear_has_login_token();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* login_token_;
  int err_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();
  
  void InitAsDefaultInstance();
  static Result* default_instance_;
};
// ===================================================================


// ===================================================================

// Register

// required string device_type = 1;
inline bool Register::has_device_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Register::set_has_device_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Register::clear_has_device_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Register::clear_device_type() {
  if (device_type_ != &::google::protobuf::internal::kEmptyString) {
    device_type_->clear();
  }
  clear_has_device_type();
}
inline const ::std::string& Register::device_type() const {
  return *device_type_;
}
inline void Register::set_device_type(const ::std::string& value) {
  set_has_device_type();
  if (device_type_ == &::google::protobuf::internal::kEmptyString) {
    device_type_ = new ::std::string;
  }
  device_type_->assign(value);
}
inline void Register::set_device_type(const char* value) {
  set_has_device_type();
  if (device_type_ == &::google::protobuf::internal::kEmptyString) {
    device_type_ = new ::std::string;
  }
  device_type_->assign(value);
}
inline void Register::set_device_type(const char* value, size_t size) {
  set_has_device_type();
  if (device_type_ == &::google::protobuf::internal::kEmptyString) {
    device_type_ = new ::std::string;
  }
  device_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Register::mutable_device_type() {
  set_has_device_type();
  if (device_type_ == &::google::protobuf::internal::kEmptyString) {
    device_type_ = new ::std::string;
  }
  return device_type_;
}
inline ::std::string* Register::release_device_type() {
  clear_has_device_type();
  if (device_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = device_type_;
    device_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string device_token = 2;
inline bool Register::has_device_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Register::set_has_device_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Register::clear_has_device_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Register::clear_device_token() {
  if (device_token_ != &::google::protobuf::internal::kEmptyString) {
    device_token_->clear();
  }
  clear_has_device_token();
}
inline const ::std::string& Register::device_token() const {
  return *device_token_;
}
inline void Register::set_device_token(const ::std::string& value) {
  set_has_device_token();
  if (device_token_ == &::google::protobuf::internal::kEmptyString) {
    device_token_ = new ::std::string;
  }
  device_token_->assign(value);
}
inline void Register::set_device_token(const char* value) {
  set_has_device_token();
  if (device_token_ == &::google::protobuf::internal::kEmptyString) {
    device_token_ = new ::std::string;
  }
  device_token_->assign(value);
}
inline void Register::set_device_token(const char* value, size_t size) {
  set_has_device_token();
  if (device_token_ == &::google::protobuf::internal::kEmptyString) {
    device_token_ = new ::std::string;
  }
  device_token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Register::mutable_device_token() {
  set_has_device_token();
  if (device_token_ == &::google::protobuf::internal::kEmptyString) {
    device_token_ = new ::std::string;
  }
  return device_token_;
}
inline ::std::string* Register::release_device_token() {
  clear_has_device_token();
  if (device_token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = device_token_;
    device_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string device_uuid = 3;
inline bool Register::has_device_uuid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Register::set_has_device_uuid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Register::clear_has_device_uuid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Register::clear_device_uuid() {
  if (device_uuid_ != &::google::protobuf::internal::kEmptyString) {
    device_uuid_->clear();
  }
  clear_has_device_uuid();
}
inline const ::std::string& Register::device_uuid() const {
  return *device_uuid_;
}
inline void Register::set_device_uuid(const ::std::string& value) {
  set_has_device_uuid();
  if (device_uuid_ == &::google::protobuf::internal::kEmptyString) {
    device_uuid_ = new ::std::string;
  }
  device_uuid_->assign(value);
}
inline void Register::set_device_uuid(const char* value) {
  set_has_device_uuid();
  if (device_uuid_ == &::google::protobuf::internal::kEmptyString) {
    device_uuid_ = new ::std::string;
  }
  device_uuid_->assign(value);
}
inline void Register::set_device_uuid(const char* value, size_t size) {
  set_has_device_uuid();
  if (device_uuid_ == &::google::protobuf::internal::kEmptyString) {
    device_uuid_ = new ::std::string;
  }
  device_uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Register::mutable_device_uuid() {
  set_has_device_uuid();
  if (device_uuid_ == &::google::protobuf::internal::kEmptyString) {
    device_uuid_ = new ::std::string;
  }
  return device_uuid_;
}
inline ::std::string* Register::release_device_uuid() {
  clear_has_device_uuid();
  if (device_uuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = device_uuid_;
    device_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string system_version = 4;
inline bool Register::has_system_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Register::set_has_system_version() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Register::clear_has_system_version() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Register::clear_system_version() {
  if (system_version_ != &::google::protobuf::internal::kEmptyString) {
    system_version_->clear();
  }
  clear_has_system_version();
}
inline const ::std::string& Register::system_version() const {
  return *system_version_;
}
inline void Register::set_system_version(const ::std::string& value) {
  set_has_system_version();
  if (system_version_ == &::google::protobuf::internal::kEmptyString) {
    system_version_ = new ::std::string;
  }
  system_version_->assign(value);
}
inline void Register::set_system_version(const char* value) {
  set_has_system_version();
  if (system_version_ == &::google::protobuf::internal::kEmptyString) {
    system_version_ = new ::std::string;
  }
  system_version_->assign(value);
}
inline void Register::set_system_version(const char* value, size_t size) {
  set_has_system_version();
  if (system_version_ == &::google::protobuf::internal::kEmptyString) {
    system_version_ = new ::std::string;
  }
  system_version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Register::mutable_system_version() {
  set_has_system_version();
  if (system_version_ == &::google::protobuf::internal::kEmptyString) {
    system_version_ = new ::std::string;
  }
  return system_version_;
}
inline ::std::string* Register::release_system_version() {
  clear_has_system_version();
  if (system_version_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = system_version_;
    system_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string software_version = 5;
inline bool Register::has_software_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Register::set_has_software_version() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Register::clear_has_software_version() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Register::clear_software_version() {
  if (software_version_ != &::google::protobuf::internal::kEmptyString) {
    software_version_->clear();
  }
  clear_has_software_version();
}
inline const ::std::string& Register::software_version() const {
  return *software_version_;
}
inline void Register::set_software_version(const ::std::string& value) {
  set_has_software_version();
  if (software_version_ == &::google::protobuf::internal::kEmptyString) {
    software_version_ = new ::std::string;
  }
  software_version_->assign(value);
}
inline void Register::set_software_version(const char* value) {
  set_has_software_version();
  if (software_version_ == &::google::protobuf::internal::kEmptyString) {
    software_version_ = new ::std::string;
  }
  software_version_->assign(value);
}
inline void Register::set_software_version(const char* value, size_t size) {
  set_has_software_version();
  if (software_version_ == &::google::protobuf::internal::kEmptyString) {
    software_version_ = new ::std::string;
  }
  software_version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Register::mutable_software_version() {
  set_has_software_version();
  if (software_version_ == &::google::protobuf::internal::kEmptyString) {
    software_version_ = new ::std::string;
  }
  return software_version_;
}
inline ::std::string* Register::release_software_version() {
  clear_has_software_version();
  if (software_version_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = software_version_;
    software_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string secret_key = 6;
inline bool Register::has_secret_key() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Register::set_has_secret_key() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Register::clear_has_secret_key() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Register::clear_secret_key() {
  if (secret_key_ != &::google::protobuf::internal::kEmptyString) {
    secret_key_->clear();
  }
  clear_has_secret_key();
}
inline const ::std::string& Register::secret_key() const {
  return *secret_key_;
}
inline void Register::set_secret_key(const ::std::string& value) {
  set_has_secret_key();
  if (secret_key_ == &::google::protobuf::internal::kEmptyString) {
    secret_key_ = new ::std::string;
  }
  secret_key_->assign(value);
}
inline void Register::set_secret_key(const char* value) {
  set_has_secret_key();
  if (secret_key_ == &::google::protobuf::internal::kEmptyString) {
    secret_key_ = new ::std::string;
  }
  secret_key_->assign(value);
}
inline void Register::set_secret_key(const char* value, size_t size) {
  set_has_secret_key();
  if (secret_key_ == &::google::protobuf::internal::kEmptyString) {
    secret_key_ = new ::std::string;
  }
  secret_key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Register::mutable_secret_key() {
  set_has_secret_key();
  if (secret_key_ == &::google::protobuf::internal::kEmptyString) {
    secret_key_ = new ::std::string;
  }
  return secret_key_;
}
inline ::std::string* Register::release_secret_key() {
  clear_has_secret_key();
  if (secret_key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = secret_key_;
    secret_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Response

// required .login.Response.Error err = 1;
inline bool Response::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Response::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Response::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Response::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::login::Response_Error Response::err() const {
  return static_cast< ::login::Response_Error >(err_);
}
inline void Response::set_err(::login::Response_Error value) {
  GOOGLE_DCHECK(::login::Response_Error_IsValid(value));
  set_has_err();
  err_ = value;
}

// required string user_id = 2;
inline bool Response::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Response::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Response::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Response::clear_user_id() {
  if (user_id_ != &::google::protobuf::internal::kEmptyString) {
    user_id_->clear();
  }
  clear_has_user_id();
}
inline const ::std::string& Response::user_id() const {
  return *user_id_;
}
inline void Response::set_user_id(const ::std::string& value) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(value);
}
inline void Response::set_user_id(const char* value) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(value);
}
inline void Response::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Response::mutable_user_id() {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  return user_id_;
}
inline ::std::string* Response::release_user_id() {
  clear_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_id_;
    user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string user_token = 3;
inline bool Response::has_user_token() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Response::set_has_user_token() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Response::clear_has_user_token() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Response::clear_user_token() {
  if (user_token_ != &::google::protobuf::internal::kEmptyString) {
    user_token_->clear();
  }
  clear_has_user_token();
}
inline const ::std::string& Response::user_token() const {
  return *user_token_;
}
inline void Response::set_user_token(const ::std::string& value) {
  set_has_user_token();
  if (user_token_ == &::google::protobuf::internal::kEmptyString) {
    user_token_ = new ::std::string;
  }
  user_token_->assign(value);
}
inline void Response::set_user_token(const char* value) {
  set_has_user_token();
  if (user_token_ == &::google::protobuf::internal::kEmptyString) {
    user_token_ = new ::std::string;
  }
  user_token_->assign(value);
}
inline void Response::set_user_token(const char* value, size_t size) {
  set_has_user_token();
  if (user_token_ == &::google::protobuf::internal::kEmptyString) {
    user_token_ = new ::std::string;
  }
  user_token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Response::mutable_user_token() {
  set_has_user_token();
  if (user_token_ == &::google::protobuf::internal::kEmptyString) {
    user_token_ = new ::std::string;
  }
  return user_token_;
}
inline ::std::string* Response::release_user_token() {
  clear_has_user_token();
  if (user_token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_token_;
    user_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Login

// required string user_id = 1;
inline bool Login::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Login::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Login::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Login::clear_user_id() {
  if (user_id_ != &::google::protobuf::internal::kEmptyString) {
    user_id_->clear();
  }
  clear_has_user_id();
}
inline const ::std::string& Login::user_id() const {
  return *user_id_;
}
inline void Login::set_user_id(const ::std::string& value) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(value);
}
inline void Login::set_user_id(const char* value) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(value);
}
inline void Login::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Login::mutable_user_id() {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  return user_id_;
}
inline ::std::string* Login::release_user_id() {
  clear_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_id_;
    user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string user_token = 2;
inline bool Login::has_user_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Login::set_has_user_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Login::clear_has_user_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Login::clear_user_token() {
  if (user_token_ != &::google::protobuf::internal::kEmptyString) {
    user_token_->clear();
  }
  clear_has_user_token();
}
inline const ::std::string& Login::user_token() const {
  return *user_token_;
}
inline void Login::set_user_token(const ::std::string& value) {
  set_has_user_token();
  if (user_token_ == &::google::protobuf::internal::kEmptyString) {
    user_token_ = new ::std::string;
  }
  user_token_->assign(value);
}
inline void Login::set_user_token(const char* value) {
  set_has_user_token();
  if (user_token_ == &::google::protobuf::internal::kEmptyString) {
    user_token_ = new ::std::string;
  }
  user_token_->assign(value);
}
inline void Login::set_user_token(const char* value, size_t size) {
  set_has_user_token();
  if (user_token_ == &::google::protobuf::internal::kEmptyString) {
    user_token_ = new ::std::string;
  }
  user_token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Login::mutable_user_token() {
  set_has_user_token();
  if (user_token_ == &::google::protobuf::internal::kEmptyString) {
    user_token_ = new ::std::string;
  }
  return user_token_;
}
inline ::std::string* Login::release_user_token() {
  clear_has_user_token();
  if (user_token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_token_;
    user_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Result

// required .login.Result.Error err = 1;
inline bool Result::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Result::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Result::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Result::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::login::Result_Error Result::err() const {
  return static_cast< ::login::Result_Error >(err_);
}
inline void Result::set_err(::login::Result_Error value) {
  GOOGLE_DCHECK(::login::Result_Error_IsValid(value));
  set_has_err();
  err_ = value;
}

// required string login_token = 2;
inline bool Result::has_login_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Result::set_has_login_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Result::clear_has_login_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Result::clear_login_token() {
  if (login_token_ != &::google::protobuf::internal::kEmptyString) {
    login_token_->clear();
  }
  clear_has_login_token();
}
inline const ::std::string& Result::login_token() const {
  return *login_token_;
}
inline void Result::set_login_token(const ::std::string& value) {
  set_has_login_token();
  if (login_token_ == &::google::protobuf::internal::kEmptyString) {
    login_token_ = new ::std::string;
  }
  login_token_->assign(value);
}
inline void Result::set_login_token(const char* value) {
  set_has_login_token();
  if (login_token_ == &::google::protobuf::internal::kEmptyString) {
    login_token_ = new ::std::string;
  }
  login_token_->assign(value);
}
inline void Result::set_login_token(const char* value, size_t size) {
  set_has_login_token();
  if (login_token_ == &::google::protobuf::internal::kEmptyString) {
    login_token_ = new ::std::string;
  }
  login_token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Result::mutable_login_token() {
  set_has_login_token();
  if (login_token_ == &::google::protobuf::internal::kEmptyString) {
    login_token_ = new ::std::string;
  }
  return login_token_;
}
inline ::std::string* Result::release_login_token() {
  clear_has_login_token();
  if (login_token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = login_token_;
    login_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace login

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::login::Response_Error>() {
  return ::login::Response_Error_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::login::Result_Error>() {
  return ::login::Result_Error_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_login_2eproto__INCLUDED
